name: Merge Main Quality Gates

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  quality-gates:
    name: Build, Lint & Lighthouse
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Build project
        run: npm run build
        env:
          CI: "true"

      - name: Run Lighthouse CI
        env:
          CI: "true"
        run: npx --yes @lhci/cli@0.14.0 autorun --config=./lighthouserc.json

      - name: Publish Lighthouse summary
        if: success()
        env:
          SUMMARY_PATH: ${{ runner.temp }}/lighthouse-summary.md
        run: |
          node <<'EOF'
          const fs = require("fs");
          const path = ".lighthouseci";
          const manifestPath = `${path}/manifest.json`;
          const reportPath = `${path}/lhr-0.json`;
          const summaryFile = process.env.GITHUB_STEP_SUMMARY;

          if (!fs.existsSync(manifestPath) || !fs.existsSync(reportPath)) {
            console.warn("Lighthouse reports were not found. Skipping summary.");
            process.exit(0);
          }

          const manifest = JSON.parse(fs.readFileSync(manifestPath, "utf8"));
          const lhr = JSON.parse(fs.readFileSync(reportPath, "utf8"));

          if (!Array.isArray(manifest) || !manifest.length) {
            console.warn("Manifest is empty. Skipping summary.");
            process.exit(0);
          }

          const summary = manifest[0].summary || {};
          const audits = lhr.audits || {};
          const formatScore = (value) =>
            typeof value === "number" ? `${Math.round(value * 100)}` : "N/A";

          const metrics = [
            ["Performance", formatScore(summary.performance)],
            ["Accessibility", formatScore(summary.accessibility)],
            ["Best Practices", formatScore(summary["best-practices"])],
            ["SEO", formatScore(summary.seo)],
          ];

          const vital = (id) =>
            audits[id] && typeof audits[id].numericValue === "number"
              ? Math.round(audits[id].numericValue)
              : "N/A";

          const vitals = [
            ["First Contentful Paint (ms)", vital("first-contentful-paint")],
            ["Largest Contentful Paint (ms)", vital("largest-contentful-paint")],
            ["Total Blocking Time (ms)", vital("total-blocking-time")],
            ["Cumulative Layout Shift", audits["cumulative-layout-shift"]?.numericValue ?? "N/A"],
          ];

          const toTable = (rows) =>
            ["| 指標 | 値 |", "| --- | --- |", ...rows.map(([label, value]) => `| ${label} | ${value} |`)].join("\n");

          const lines = [
            "### Lighthouse カテゴリスコア",
            toTable(metrics),
            "",
            "### Core Web Vitals",
            toTable(vitals),
            "",
            "_Lighthouse CI による自動測定結果です。_",
          ];

          fs.appendFileSync(summaryFile, `${lines.join("\n")}\n`);
          EOF

      - name: Upload Lighthouse artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/
